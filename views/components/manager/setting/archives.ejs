<div class="row mt-1">
    <div class="col-12">
        <div class="row">
            <div class="col-12">
                <div class="page-title-box d-sm-flex align-items-center justify-content-between">
                    <h3 class="mb-sm-0">Arxivlar bo'limi</h3>
                    <div class="page-title-right">
                        <ol class="breadcrumb m-0">
                            <li class="breadcrumb-item"><a href="/super_admin/dashboard/general">Asosiy sahifa</a></li>
                            <li class="breadcrumb-item active">Arxiv</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
        <div class="row col md-12">
            <div class="col-md-4 col-lg-4 col-xl-4 col-sm-12">
                <select class="form-control select2" style="width: 100%" onchange="filter_by_school(this.value)"
                    id="school_all"></select>
            </div>
            <div class="col-md-4 col-lg-4 col-xl-4 col-sm-12">
                <select class="form-control select2" style="width: 100%" onchange="types_all(this.value)"
                    id="types_all">
                    <option value="">Tanlash</option>
                    <option value="group">Guruhlar</option>
                    <option value="room">Xonalar</option>
                    <option value="mentor">O'qituvchi</option>
                    <option value="seller">Sotuvchi</option>
                    <option value="admin">Adminstrtor</option>
                </select>
            </div>
        </div>
        <div class="card mt-3">
            <div class="card-body">
                <table class="table table-striped table-bordered dt-responsive nowrap text-center"
                    style="border-collapse: collapse; border-spacing: 0; width: 100%">
                    <thead>
                        <tr>
                            <th style="width: 60%;">Nomi</th>
                            <th style="width: 30%;">Sana</th>
                            <th style="width: 10%;">Sozlama</th>
                        </tr>
                    </thead>
                    <tbody class="setTables"></tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<script src="/assets/axios.min.js"></script>
<script src="/assets/jquery.min.js"></script>
<script src="/assets/notification.js"></script>
<script>
    /* 
            @description: Tokendagi user boyicha filiallarni olish 
            @api: /api/user/decode
            @method: GET
        */
    const setSelectionSingle = async (DATA, APPENDING, MESSAGE) => {
        if (DATA == "") {
            const appends = $(APPENDING);
            await appends.html("");
            appends.append(`<option value="" selected>Mavjud emas</option> `);
            danger(MESSAGE);
        } else {
            const appends = $(APPENDING);
            await appends.html("");
            appends.append(`<option value="" selected>Tanlash</option> `);
            DATA.forEach((item) => {
                appends.append(
                    `<option value="${item._id}">${item.name}</option>`
                );
            });
        }
    }
    let school_id;
    const filter_by_school = async (schoolID) => {
        const types_all = $("#types_all")
        await types_all.html("")
        types_all.append(`
            <option value="">Tanlash</option>
            <option value="group">Guruhlar</option>
            <option value="room">Xonalar</option>
            <option value="mentor">O'qituvchi</option>
            <option value="seller">Sotuvchi</option>
            <option value="admin">Adminstrtor</option>
        `)
        school_id = schoolID
    }
    const Token = window.localStorage.getItem('user')
    axios.get('/api/user/decode', { headers: { authorization: Token } }).then((res) => {
        const id = res.data.id;
        axios.get(`/api/school/manager/${id}`, { params: { actions: "active" } }).then(async (res) => {
            const school = res.data.data;
            setSelectionSingle(school, "#school_all", "O'quv markaz mavjud emas")
        })
    })
    
    
    
    let key;
    const types_all = (values) => {
        if (!school_id || school_id == undefined) {
            danger("Iltimos o'quv markazni tanlang")
        } else {
            if (values === "group") {
                key = "group"
                axios.get(`/api/group/filter/${school_id}`, { params: { actions: "archive" } }).then((res) => {
                    const data = res.data.data;
                    setTables(data, ".setTables", "group")
                })
            }
            if (values === "mentor") {
                key = "mentor"
                axios.get(`/api/user/filter_user`, { params: { actions: "archive", school: school_id, role: "mentor" } }).then((res) => {
                    const data = res.data.data;
                    setTables(data, ".setTables", "mentor")
                })
            }
            if (values === "seller") {
                key = "seller"
                axios.get(`/api/user/filter_user`, { params: { actions: "archive", school: school_id, role: "seller" } }).then((res) => {
                    const data = res.data.data;
                    setTables(data, ".setTables", "seller")
                })
            }
            if (values === "admin") {
                key = "admin"
                axios.get(`/api/user/filter_user`, { params: { actions: "archive", school: school_id, role: "admin" } }).then((res) => {
                    const data = res.data.data;
                    setTables(data, ".setTables", "admin")
                })
            }
            if (values === "room") {
                key = "room"
                axios.get(`/api/room/filter/${school_id}`, { params: { actions: "archive", } }).then((res) => {
                    const data = res.data.data;
                    setTables(data, ".setTables", "room")
                })
            }
        }
    }
    const setTables = async (data, appending, keys) => {
        const elements = $(appending)
        await elements.html("")
        data.forEach((item, index) => {
            elements.append(`
                <tr>
                    <td>${item.name}</td>
                    <td>${new Date(item.createdAt).toLocaleDateString()}</td>
                    <td>
                      <div class="btn-group">
                        <button onclick="makeActive('${item._id}' , '${keys}')" style="padding: 5px 9px; font-size: 16px;" type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                          <i class="fas fa-redo"></i>
                        </button>
                        <button onclick="deleteData('${item._id}' , '${keys}')" style="padding: 5px 9px; font-size: 16px; margin-left: 5px" type="button" class="btn btn-danger dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                          <i class="fas fa-trash"></i>
                        </button>
                      </div
                    </td>
                </tr>
            `)
        });
    }
    const makeActive = (id, keys) => {
        if (keys == "group") {
            axios.put(`/api/group/${id}`, { actions: "active" }).then((response) => {
                axios.get('/api/category/all', { params: { actions: "archive" } }).then((res) => {
                    const data = res.data.data;
                    setTables(data, ".setTables", "category")
                })
            })
        }
        if (keys == "mentor") {
            axios.put(`/api/user/content/${id}`, { actions: "active" }).then((response) => {
                axios.get(`/api/user/filter_user`, { params: { actions: "archive", school: school_id, role: "mentor" } }).then((res) => {
                    const data = res.data.data;
                    setTables(data, ".setTables", "mentor")
                })
            })
        }
        if (keys == "seller") {
            axios.put(`/api/user/content/${id}`, { actions: "active" }).then((response) => {
                axios.get(`/api/user/filter_user`, { params: { actions: "archive", school: school_id, role: "seller" } }).then((res) => {
                    const data = res.data.data;
                    setTables(data, ".setTables", "seller")
                })
            })
        }
        if (keys == "admin") {
            axios.put(`/api/user/content/${id}`, { actions: "active" }).then((response) => {
                axios.get(`/api/user/filter_user`, { params: { actions: "archive", school: school_id, role: "admin" } }).then((res) => {
                    const data = res.data.data;
                    setTables(data, ".setTables", "admin")
                })
            })
        }
        if (keys == "room") {
            axios.put(`/api/room/${id}`, { actions: "active" }).then((response) => {
                axios.get(`/api/room/filter/${id}`, { params: { actions: "archive", } }).then((res) => {
                    const data = res.data.data;
                    setTables(data, ".setTables", "room")
                })
            })
        }
    }
    const deleteData = (id, keys) => {
        if (keys == "group") {
            axios.delete(`/api/group/${id}`).then((response) => {
                axios.get('/api/category/all', { params: { actions: "archive" } }).then((res) => {
                    const data = res.data.data;
                    setTables(data, ".setTables", "category")
                })
            })
        }
        if (keys == "mentor") {
            axios.delete(`/api/user/${id}`).then((response) => {
                axios.get(`/api/user/filter_user`, { params: { actions: "archive", school: school_id, role: "mentor" } }).then((res) => {
                    const data = res.data.data;
                    setTables(data, ".setTables", "mentor")
                })
            })
        }
        if (keys == "seller") {
            axios.delete(`/api/user/${id}`,).then((response) => {
                axios.get(`/api/user/filter_user`, { params: { actions: "archive", school: school_id, role: "seller" } }).then((res) => {
                    const data = res.data.data;
                    setTables(data, ".setTables", "seller")
                })
            })
        }
        if (keys == "admin") {
            axios.delete(`/api/user/${id}`,).then((response) => {
                axios.get(`/api/user/filter_user`, { params: { actions: "archive", school: school_id, role: "admin" } }).then((res) => {
                    const data = res.data.data;
                    setTables(data, ".setTables", "admin")
                })
            })
        }
        if (keys == "room") {
            axios.delete(`/api/room/${id}`,).then((response) => {
                axios.get(`/api/room/filter/${id}`, { params: { actions: "archive", } }).then((res) => {
                    const data = res.data.data;
                    setTables(data, ".setTables", "admin")
                })
            })
        }
    }
</script>